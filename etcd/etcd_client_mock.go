/**
 * Copyright (c) 2016 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Automatically generated by MockGen. DO NOT EDIT!
// Source: etcd/etcd_client.go

package etcd

import (
	client "github.com/coreos/etcd/client"
	gomock "github.com/golang/mock/gomock"
)

// Mock of EtcdKVStore interface
type MockEtcdKVStore struct {
	ctrl     *gomock.Controller
	recorder *_MockEtcdKVStoreRecorder
}

// Recorder for MockEtcdKVStore (not exported)
type _MockEtcdKVStoreRecorder struct {
	mock *MockEtcdKVStore
}

func NewMockEtcdKVStore(ctrl *gomock.Controller) *MockEtcdKVStore {
	mock := &MockEtcdKVStore{ctrl: ctrl}
	mock.recorder = &_MockEtcdKVStoreRecorder{mock}
	return mock
}

func (_m *MockEtcdKVStore) EXPECT() *_MockEtcdKVStoreRecorder {
	return _m.recorder
}

func (_m *MockEtcdKVStore) Connect() error {
	ret := _m.ctrl.Call(_m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockEtcdKVStore) GetKeyValue(key string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetKeyValue", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEtcdKVStoreRecorder) GetKeyValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKeyValue", arg0)
}

func (_m *MockEtcdKVStore) GetKeyIntoStruct(key string, result interface{}) error {
	ret := _m.ctrl.Call(_m, "GetKeyIntoStruct", key, result)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) GetKeyIntoStruct(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKeyIntoStruct", arg0, arg1)
}

func (_m *MockEtcdKVStore) Create(key string, value interface{}) error {
	ret := _m.ctrl.Call(_m, "Create", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1)
}

func (_m *MockEtcdKVStore) CreateDir(key string) error {
	ret := _m.ctrl.Call(_m, "CreateDir", key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) CreateDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDir", arg0)
}

func (_m *MockEtcdKVStore) Set(key string, value interface{}) error {
	ret := _m.ctrl.Call(_m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}

func (_m *MockEtcdKVStore) Update(key string, value interface{}, prevValue interface{}, prevIndex uint64) error {
	ret := _m.ctrl.Call(_m, "Update", key, value, prevValue, prevIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1, arg2, arg3)
}

func (_m *MockEtcdKVStore) Delete(key string, prevIndex uint64) error {
	ret := _m.ctrl.Call(_m, "Delete", key, prevIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockEtcdKVStore) DeleteDir(key string) error {
	ret := _m.ctrl.Call(_m, "DeleteDir", key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) DeleteDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDir", arg0)
}

func (_m *MockEtcdKVStore) AddOrUpdateDir(key string) error {
	ret := _m.ctrl.Call(_m, "AddOrUpdateDir", key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdKVStoreRecorder) AddOrUpdateDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddOrUpdateDir", arg0)
}

func (_m *MockEtcdKVStore) GetKeyNodes(key string) (client.Node, error) {
	ret := _m.ctrl.Call(_m, "GetKeyNodes", key)
	ret0, _ := ret[0].(client.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEtcdKVStoreRecorder) GetKeyNodes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKeyNodes", arg0)
}

func (_m *MockEtcdKVStore) GetKeyNodesRecursively(key string) (client.Node, error) {
	ret := _m.ctrl.Call(_m, "GetKeyNodesRecursively", key)
	ret0, _ := ret[0].(client.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEtcdKVStoreRecorder) GetKeyNodesRecursively(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKeyNodesRecursively", arg0)
}

func (_m *MockEtcdKVStore) GetLongPollWatcherForKey(key string, monitorSubNodes bool, afterIndex uint64) (client.Watcher, error) {
	ret := _m.ctrl.Call(_m, "GetLongPollWatcherForKey", key, monitorSubNodes, afterIndex)
	ret0, _ := ret[0].(client.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEtcdKVStoreRecorder) GetLongPollWatcherForKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLongPollWatcherForKey", arg0, arg1, arg2)
}
