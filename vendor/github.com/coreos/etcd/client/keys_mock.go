// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/coreos/etcd/client/keys.go

package client

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// Mock of KeysAPI interface
type MockKeysAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockKeysAPIRecorder
}

// Recorder for MockKeysAPI (not exported)
type _MockKeysAPIRecorder struct {
	mock *MockKeysAPI
}

func NewMockKeysAPI(ctrl *gomock.Controller) *MockKeysAPI {
	mock := &MockKeysAPI{ctrl: ctrl}
	mock.recorder = &_MockKeysAPIRecorder{mock}
	return mock
}

func (_m *MockKeysAPI) EXPECT() *_MockKeysAPIRecorder {
	return _m.recorder
}

func (_m *MockKeysAPI) Get(ctx context.Context, key string, opts *GetOptions) (*Response, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, key, opts)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeysAPIRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockKeysAPI) Set(ctx context.Context, key string, value string, opts *SetOptions) (*Response, error) {
	ret := _m.ctrl.Call(_m, "Set", ctx, key, value, opts)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeysAPIRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1, arg2, arg3)
}

func (_m *MockKeysAPI) Delete(ctx context.Context, key string, opts *DeleteOptions) (*Response, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, key, opts)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeysAPIRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2)
}

func (_m *MockKeysAPI) Create(ctx context.Context, key string, value string) (*Response, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, key, value)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeysAPIRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1, arg2)
}

func (_m *MockKeysAPI) CreateInOrder(ctx context.Context, dir string, value string, opts *CreateInOrderOptions) (*Response, error) {
	ret := _m.ctrl.Call(_m, "CreateInOrder", ctx, dir, value, opts)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeysAPIRecorder) CreateInOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInOrder", arg0, arg1, arg2, arg3)
}

func (_m *MockKeysAPI) Update(ctx context.Context, key string, value string) (*Response, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, key, value)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeysAPIRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1, arg2)
}

func (_m *MockKeysAPI) Watcher(key string, opts *WatcherOptions) Watcher {
	ret := _m.ctrl.Call(_m, "Watcher", key, opts)
	ret0, _ := ret[0].(Watcher)
	return ret0
}

func (_mr *_MockKeysAPIRecorder) Watcher(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watcher", arg0, arg1)
}

// Mock of Watcher interface
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *_MockWatcherRecorder
}

// Recorder for MockWatcher (not exported)
type _MockWatcherRecorder struct {
	mock *MockWatcher
}

func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &_MockWatcherRecorder{mock}
	return mock
}

func (_m *MockWatcher) EXPECT() *_MockWatcherRecorder {
	return _m.recorder
}

func (_m *MockWatcher) Next(_param0 context.Context) (*Response, error) {
	ret := _m.ctrl.Call(_m, "Next", _param0)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockWatcherRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}
